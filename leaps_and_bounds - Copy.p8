pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- leaps and bounds:
-- a squirrel game
-- by matt phillips
-- introspection games
-- game off 2019

-- globals
local cam, dt, game_objects, gravity, collided, map_x, map_y, player

function _init()
    dt = null
    game_objects = {}
    gravity = 1
    map_x = 0
    map_y = 0
    make_player('player', 20, 20)
    player = game_objects[#game_objects]
    cam = make_cam(player)
end

function _update()
    -- update dt value
    if(dt == null) do
        local target_fps = stat(8)
        dt = 1 / target_fps
    end
    -- update all game objects
    local obj
    for obj in all(game_objects) do
        obj:update()
    end
    cam:update()
end

function _draw()
    cls()
    camera(cam:cam_pos())
    -- draw the map
    map(map_x, map_y, 0, 0, 128, 128)
    -- draw all game objects
    local obj
    for obj in all(game_objects) do
        obj:draw()
    end
    camera(0, 0)
end

-- function that makes the player
function make_player(name, x, y)
    local props 
    props = {
        width = 12,
        height = 12,
        jump_accel = 100,
        velocity_x = 0,
        velocity_y = 0,
        max_velocity_x = 4,
        min_velocity_x = -4,
        max_velocity_x_jumping = 1.5,
        min_velocity_x_jumping = -1.5,
        min_velocity_y = -8,
        max_velocity_y = 8,
        accel = 50,
        friction = 0.7,
        move_x = 0,
        move_y = 0,
        grounded = false,
        jumping = false,
        jump_frame = 0,
        max_jump_frames = 5,
        max_jump_height = 16,
        jump_start_y = 0,
        can_move = true,
        moving = false,
        facing_left = false,
        update = function(self)
            -- calculate x velocity
            if self.can_move then
                -- get jump input
                if btn(4) or btn(5) then
                    if self.jump_frame == 0 and self.grounded then
                        self.grounded = false
                        self.jumping = true
                        self.jump_start_y = self.y
                        self.jump_frame += 1
                        self.velocity_y += ((self.jump_accel) * dt) * - 1
                    elseif self.jump_frame <= self.max_jump_frames and self.jumping and (self.y >= self.jump_start_y - self.max_jump_height) then
                        self.jump_frame += 1
                        self.velocity_y += ((self.jump_accel) * dt) * - 1
                    else
                        self.jumping = false
                        self.jump_frame = 0
                    end
                else
                    self.jumping = false
                    self.jump_frame = 0
                end

                -- get x input
                if btn(0) then
                    self.moving = true
                    self.velocity_x += ((self.accel) * dt) * - 1
                    self.facing_left = true
				end
                if btn(1) then
                    self.moving = true
                    self.velocity_x += ((self.accel) * dt)
                    self.facing_left = false
				end
            end
            if not btn(0) and not btn(1) then
                self.moving = false
            end

            -- apply friction
            -- TODO split ground from air friction
            if self.velocity_x > 1 then
                self.velocity_x -= self.friction
            elseif self.velocity_x < -1 then
                self.velocity_x += self.friction
            elseif self.velocity_x > -1 and self.velocity_x < 1 and not self.moving then
                self.velocity_x = 0
            end

            -- apply gravity
            if self.grounded then
                self.velocity_y = 0
            else
                self.velocity_y += gravity
            end

            -- limit x velocity
            self.velocity_x = mid(self.min_velocity_x, self.velocity_x, self.max_velocity_x)
            -- limit y velocity
            self.velocity_y = mid(self.min_velocity_y, self.velocity_y, self.max_velocity_y)

            -- update position
            local new_x, new_y
            new_x = self.x + self.velocity_x
            new_y = self.y + self.velocity_y

            -- check for collisions
            local hit_head
            altered_x, self.y, self.grounded, hit_head = check_collision(new_x, new_y, self.width, self.height, 1)
            if new_x == altered_x then
                self.x = new_x
            end
            
            -- handle head bumping
            if hit_head then
                self.velocity_y = 0
                self.jumping = false
            end

            -- set animation states
            if self.velocity_x == 0 then
                self.running_ani:reset()
                self.idle_ani:start()
                self.idle_ani:animate()
            elseif self.velocity_x != 0 and self.grounded then
                self.idle_ani:reset()
                self.running_ani:start()
                self.running_ani:animate()
            end
            
        end,
        running_ani = animator({
            {sx=0, sy=0, sw=24, sh=16, f=4},
            {sx=24, sy=0, sw=24, sh=16, f=4},
            {sx=48, sy=0, sw=24, sh=16, f=4},
            {sx=72, sy=0, sw=16, sh=16, f=4},
            {sx=88, sy=0, sw=24, sh=16, f=4}
        }),
        idle_ani = animator({
            {sx=0, sy=0, sw=24, sh=16, f=1}
        }),
        draw = function(self)
            self.idle_ani:draw(self.x, self.y, self.facing_left)
            self.running_ani:draw(self.x, self.y, self.facing_left)
            -- print(self.velocity_x)
            -- print(self.velocity_y)
            -- print(self.grounded)       
        end
    }
    make_game_object(name, x, y, props)
end

-- function that makes game objects
function make_game_object(name, x, y, props)
    local obj
    obj = {
        name=name,
        x=x,
        y=y,
        velocity_x=0,
        velocity_y=0,
        update=function(self)
        end,
        draw=function(self)
        end
    }
    if not(props == nil) then
        local k, v
        for k, v in pairs(props) do
            obj[k] = v
        end
    end
    add(game_objects, obj)
end

-- function that animates sprites
    function animator(sprites)
        local obj
        obj = {
            sprites = sprites,
            frames = 0,
            counter = 1,
            current_sprite = 1,
            running = false,
            animate = function(self)
                if self.running then
                    self.frames = self.sprites[self.current_sprite].f
                    if self.counter == self.frames then
                        if self.current_sprite < #self.sprites then
                            self.current_sprite += 1
                        else
                            self.current_sprite = 1
                        end
                    end
                    if self.counter < self.frames then
                        self.counter += 1
                    else
                        self.counter = 1
                    end
                end
            end,
            reset = function(self)
                self.counter = 1
                self.current_sprite = 1
                self.running = false
            end,
            start = function(self)
                self.running = true
            end,
            draw = function(self, x, y, flip)
                if self.running then
                    local s = sprites[self.current_sprite]
                    sspr(s.sx, s.sy, s.sw, s.sh, x, y, s.sw, s.sh, flip)
                    --spr(self.sprites[self.current_sprite], x, y, cw, hj, flip)
                end
            end
        }
        return obj
    end

function m_vec(x,y)
    -- from mhughson template
    -- https://www.lexaloffle.com/bbs/cposts/3/37402.p8.png
    local v=
    {
        x=x,
        y=y,
       
  --get the length of the vector
        get_length=function(self)
            return sqrt(self.x^2+self.y^2)
        end,
       
  --get the normal of the vector
        get_norm=function(self)
            local l = self:get_length()
            return m_vec(self.x / l, self.y / l),l;
        end,
    }
    return v
end

function make_cam(target)
    -- adapted from mhughson template
    -- https://www.lexaloffle.com/bbs/cposts/3/37402.p8.png
    local c=
    {
        tar=target,--target to follow.
        pos=m_vec(target.x,target.y),
       
        --how far from center of screen target must
        --be before camera starts following.
        --allows for movement in center without camera
        --constantly moving.
        pull_threshold=16,

        --min and max positions of camera.
        --the edges of the level.
        pos_min=m_vec(64,64),
        pos_max=m_vec(512,512),

        update=function(self)
           
            --follow target outside of
            --pull range.
            if self:pull_max_x()<self.tar.x then
                self.pos.x+=min(self.tar.x-self:pull_max_x(),4)
            end
            if self:pull_min_x()>self.tar.x then
                self.pos.x+=min((self.tar.x-self:pull_min_x()),4)
            end
            if self:pull_max_y()<self.tar.y then
                self.pos.y+=min(self.tar.y-self:pull_max_y(),4)
            end
            if self:pull_min_y()>self.tar.y then
                self.pos.y+=min((self.tar.y-self:pull_min_y()),4)
            end

            --lock to edge
            if(self.pos.x<self.pos_min.x)self.pos.x=self.pos_min.x
            if(self.pos.x>self.pos_max.x)self.pos.x=self.pos_max.x
            if(self.pos.y<self.pos_min.y)self.pos.y=self.pos_min.y
            if(self.pos.y>self.pos_max.y)self.pos.y=self.pos_max.y
        end,

        cam_pos=function(self)
            return self.pos.x-64,self.pos.y-64
        end,

        pull_max_x=function(self)
            return self.pos.x+self.pull_threshold
        end,

        pull_min_x=function(self)
            return self.pos.x-self.pull_threshold
        end,

        pull_max_y=function(self)
            return self.pos.y+self.pull_threshold
        end,

        pull_min_y=function(self)
            return self.pos.y-self.pull_threshold
        end
    }

    return c
end

-- function that checks wall collision
function check_collision(x, y, w, h, flag)
    local up = {x + (w / 2), y}
    local down = {x + (w / 2), y + h} 
    local left = {x, y + (h / 2)}
    local right = {x + h, y + (h / 2)}
    local up_map_tile = mget(flr(up[1]/8) + map_x, flr(up[2]/8) + map_y)
    local down_map_tile = mget(flr(down[1]/8) + map_x, flr(down[2]/8) + map_y)
    local left_map_tile = mget(flr(left[1]/8) + map_x, flr(left[2]/8) + map_y)
    local right_map_tile = mget(flr(right[1]/8) + map_x, flr(right[2]/8) + map_y)
    if fget(up_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(up[1]/8), flr(up[2]/8))
        y = ty + h
    end
    if fget(down_map_tile, flag) then
        collided = true
        local tx, ty = map_tile_to_coords(flr(down[1]/8), flr(down[2]/8))
        y = ty - h
    end
    if fget(left_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(left[1]/8), flr(left[2]/8))
        x = tx + w
    end
    if fget(right_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(right[1]/8), flr(right[2]/8))
        x = tx - w
    end
    return x, y, fget(down_map_tile, flag), fget(up_map_tile, flag)
end

function map_tile_to_coords(gx, gy)
    return (gx * 8), (gy * 8)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000055000000005000000000000000000000005000000000000000000000000000000005550000000000000000000065500000000000000000000000000000
00000655500000005550000000055500000000005550000055500000000000500000000065550000000000000000000655500000000000000000000000000000
00000665500055555555000000065550000055555555000066550000000000555000000065500000005000000000000650000005000000000000000000000000
00000066505555556660000000066650555555556660000006665055555555555500000065505555005550000000000650000005550000000000000000000000
00000006655556666000000000000665555566666000000000066555555555666000000006555555555555000000000050555555555000000000000000000000
00000000005666006000000000000000556660000600000000000056666666600000000000006665556660000000000005555556660000000000000000000000
00000000006600000000000000000006660000000000000000000666000000060000000000000600666000000000000000566666000000000000000000000000
00000000066000000000000000000006000000000000000000000000000000000000000000000600006000000000000000660006000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
30300300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
34443434000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54444445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44544444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
45444454000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8080808080808080808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000008080808080808080808080800080808080000000000000000000000000000000000000000000000080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000808080000080808080808000000000000000000000000000808080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

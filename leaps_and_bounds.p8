pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- leaps and bounds:
-- a squirrel game
-- by matt phillips
-- introspection games
-- game off 2019

-- globals
local acorns, cam, countdown, dt, game_objects, gravity, 
collided, map_x, map_y, player, show_ui, state, timer, time_limit

function _init()
    timer = 0
    state = 0
end

function _update()
    if state == 0 then
        timer += 1
        if timer == 60 then
            timer = 0
            state = 1
        end
    elseif state == 1 then
        -- title screen
        if btn(4) or btn(5) then
            start_game()
            state = 2
        end
    elseif state == 2 then
        if acorns == 10 then
            -- freeze the player and remove ui then change state
            show_ui = false
            player.can_move = false
            timer += 1
            if timer == 60 then
                timer = 0
                state = 3
            end
        end
        -- playing the game
        -- update dt value
        if(dt == null) do
            local target_fps = stat(8)
            dt = 1 / target_fps
        end
        -- update all game objects
        local obj
        for obj in all(game_objects) do
            obj:update()
        end
        cam:update()
    elseif state == 3 then
        -- completed game
        if btn(4) or btn(5) then
            _init()
        end
    end
    
end

function _draw()
    if state == 0 then
        -- show splash screen
		cls(7)
		print("introspection-games", 27, 50, 0)
    elseif state == 1 then
        -- show start screen
        cls()
        print('press z or x to start', 26, 110, 5)
    elseif state == 2 then
        -- we're playing the game
        cls()
        camera(cam:cam_pos())
        -- draw the map
        map(map_x, map_y, 0, 0, 128, 128)
        -- draw all game objects
        local obj
        for obj in all(game_objects) do
            obj:draw()
        end
        camera(0, 0)
        -- draw ui
        if show_ui then
            draw_ui()
        end
    elseif state == 3 then
        -- show end screen
        cls()
        local left = 10
        print("crisping wind and", left, 4, 7)
        print("frozen night", left, 12, 7)
        print("chill the paws of", left, 20, 7)
        print("every beast.", left, 28, 7)
        print("with wisdom, work and", left, 36, 7)
        print("long foresight", left, 44, 7)
        print("the squirrel hoards", left, 52, 7)
        print("a hearty feast.", left, 60, 7)
        spr(80, 80, 80)
        sspr(0, 0, 10, 10, 88, 76, 10, 10, true)
        print('press z or x to start', 26, 110, 5)
    end
    
end

function draw_ui()
    rectfill(2, 2, 44, 10, 5)
    print("acorns x " .. acorns, 4, 4, 7)
end

function start_game()
    acorns = 0
    timer = 0
    show_ui = true
    dt = null
    game_objects = {}
    gravity = 1
    map_x = 0
    map_y = 0
    make_player('player', 100, 170)
    player = game_objects[#game_objects]
    cam = make_cam(player)
    spawn_acorns()
end

function spawn_acorns()
    make_acorn('acorn_1', 20, 194)
    make_acorn('acorn_2', 200, 194)
    make_acorn('acorn_3', 370, 226)
    make_acorn('acorn_4', 700, 194)
    make_acorn('acorn_5', 870, 218)
    make_acorn('acorn_6', 960, 66)
    make_acorn('acorn_7', 610, 10)
    make_acorn('acorn_8 ', 330, 60)
    make_acorn('acorn_9 ', 180, 90)
    make_acorn('acorn_10 ', 40, 58) 
end

function make_player(name, x, y)
    local props 
    props = {
        width = 12,
        height = 10,
        jump_accel = 100,
        velocity_x = 0,
        velocity_y = 0,
        max_velocity_x = 4,
        min_velocity_x = -4,
        max_velocity_x_jumping = 1.5,
        min_velocity_x_jumping = -1.5,
        min_velocity_y = -8,
        max_velocity_y = 8,
        accel = 50,
        friction = 0.7,
        move_x = 0,
        move_y = 0,
        grounded = false,
        jumping = false,
        jump_frame = 0,
        max_jump_frames = 5,
        max_jump_height = 16,
        jump_start_y = 0,
        can_move = true,
        moving = false,
        facing_left = false,
        running_ani = animator({
            {sx=38, sy=0, sw=15, sh=10, f=4},
            {sx=54, sy=0, sw=17, sh=10, f=4},
            {sx=72, sy=0, sw=18, sh=10, f=5},
            {sx=92, sy=0, sw=13, sh=10, f=4},
            {sx=106, sy=0, sw=12, sh=10, f=4}
        }),
        idle_ani = animator({
            {sx=0, sy=0, sw=10, sh=10, f=6},
            {sx=13, sy=0, sw=10, sh=10, f=2},
            {sx=26, sy=0, sw=10, sh=10, f=12},
            {sx=13, sy=0, sw=10, sh=10, f=2},
            {sx=0, sy=0, sw=10, sh=10, f=2},
            {sx=13, sy=0, sw=10, sh=10, f=2},
            {sx=0, sy=0, sw=10, sh=10, f=16},
            {sx=13, sy=0, sw=10, sh=10, f=2}
        }),
        jumping_ani = animator({
            {sx=38, sy=0, sw=15, sh=10, f=1}
        }),
        falling_ani = animator({
            {sx=92, sy=0, sw=13, sh=10, f=1}
        }),
        update = function(self)
            -- calculate x velocity
            if self.can_move then
                -- get jump input
                if btn(4) or btn(5) then
                    if self.jump_frame == 0 and self.grounded then
                        self.grounded = false
                        self.jumping = true
                        self.jump_start_y = self.y
                        self.jump_frame += 1
                        self.velocity_y += ((self.jump_accel) * dt) * - 1
                    elseif self.jump_frame <= self.max_jump_frames and self.jumping and (self.y >= self.jump_start_y - self.max_jump_height) then
                        self.jump_frame += 1
                        self.velocity_y += ((self.jump_accel) * dt) * - 1
                    else
                        self.jumping = false
                        self.jump_frame = 0
                    end
                else
                    self.jumping = false
                    self.jump_frame = 0
                end

                -- get x input
                if btn(0) then
                    self.moving = true
                    self.velocity_x += ((self.accel) * dt) * - 1
                    self.facing_left = true
				end
                if btn(1) then
                    self.moving = true
                    self.velocity_x += ((self.accel) * dt)
                    self.facing_left = false
				end
            end
            if not btn(0) and not btn(1) then
                self.moving = false
            end

            -- apply friction
            -- TODO split ground from air friction
            if self.velocity_x > 1 then
                self.velocity_x -= self.friction
            elseif self.velocity_x < -1 then
                self.velocity_x += self.friction
            elseif self.velocity_x > -1 and self.velocity_x < 1 and not self.moving then
                self.velocity_x = 0
            end

            -- apply gravity
            if self.grounded then
                self.velocity_y = 0
            else
                self.velocity_y += gravity
            end

            -- limit x velocity
            self.velocity_x = mid(self.min_velocity_x, self.velocity_x, self.max_velocity_x)
            -- limit y velocity
            self.velocity_y = mid(self.min_velocity_y, self.velocity_y, self.max_velocity_y)

            -- update position
            local new_x, new_y
            new_x = self.x + self.velocity_x
            new_y = self.y + self.velocity_y

            -- check for collisions
            local hit_head
            altered_x, self.y, self.grounded, hit_head = check_collision(new_x, new_y, self.width, self.height, 1)
            if new_x == altered_x then
                self.x = new_x
            end
            
            -- handle head bumping
            if hit_head then
                self.velocity_y = 0
                self.jumping = false
            end

            -- set animation states
            if self.velocity_x == 0 and self.grounded then
                self.running_ani:reset()
                self.falling_ani:reset()
                self.jumping_ani:reset()
                self.idle_ani:start()
                self.idle_ani:animate()
            elseif self.velocity_x != 0 and self.grounded then
                self.idle_ani:reset()
                self.falling_ani:reset()
                self.jumping_ani:reset()
                self.running_ani:start()
                self.running_ani:animate()
            elseif self.grounded == false and self.velocity_y < 0 then
                self.falling_ani:reset()
                self.idle_ani:reset()
                self.running_ani:reset()
                self.jumping_ani:start()
                self.jumping_ani:animate()
            elseif self.grounded == false and self.velocity_y > 0 then
                self.jumping_ani:reset()
                self.idle_ani:reset()
                self.running_ani:reset()
                self.falling_ani:start()
                self.falling_ani:animate()
            end
            
        end,
        draw = function(self)
            self.idle_ani:draw(self.x, self.y, self.facing_left)
            self.running_ani:draw(self.x, self.y, self.facing_left)
            self.jumping_ani:draw(self.x, self.y, self.facing_left)
            self.falling_ani:draw(self.x, self.y, self.facing_left)      
        end
    }
    make_game_object(name, x, y, props)
end

function make_acorn(name, x, y)
    local props
    props = {
        name = name,
        x = x,
        y = y,
        width = 8,
        height = 8,
        collected = false,
        update = function(self)
            col = overlapping_rectangles(self.x, self.y, self.width, self.height, player.x, player.y, player.width, player.height)
            if col and not collected then
                acorns += 1
                del(game_objects, self)
            end
        end,
        draw = function(self)
            spr(80, self.x, self.y)
        end
    }
    make_game_object(name, x, y, props)
end

function make_game_object(name, x, y, props)
    local obj
    obj = {
        name=name,
        x=x,
        y=y,
        velocity_x=0,
        velocity_y=0,
        update=function(self)
        end,
        draw=function(self)
        end
    }
    if not(props == nil) then
        local k, v
        for k, v in pairs(props) do
            obj[k] = v
        end
    end
    add(game_objects, obj)
end

    function animator(sprites)
        local obj
        obj = {
            sprites = sprites,
            frames = 1,
            counter = 1,
            current_sprite = 1,
            running = false,
            animate = function(self)
                if self.running then
                    self.frames = self.sprites[self.current_sprite].f
                    if self.counter == self.frames then
                        if self.current_sprite < #self.sprites then
                            self.current_sprite += 1
                        else
                            self.current_sprite = 1
                        end
                    end
                    if self.counter < self.frames then
                        self.counter += 1
                    else
                        self.counter = 1
                    end
                end
            end,
            reset = function(self)
                self.frames = 1
                self.counter = 1
                self.current_sprite = 1
                self.running = false
            end,
            start = function(self)
                self.running = true
            end,
            draw = function(self, x, y, flip)
                if self.running then
                    local s = sprites[self.current_sprite]
                    sspr(s.sx, s.sy, s.sw, s.sh, x, y, s.sw, s.sh, flip)
                end
            end
        }
        return obj
    end

function m_vec(x,y)
    -- from mhughson template
    -- https://www.lexaloffle.com/bbs/cposts/3/37402.p8.png
    local v=
    {
        x=x,
        y=y,
       
  --get the length of the vector
        get_length=function(self)
            return sqrt(self.x^2+self.y^2)
        end,
       
  --get the normal of the vector
        get_norm=function(self)
            local l = self:get_length()
            return m_vec(self.x / l, self.y / l),l;
        end,
    }
    return v
end

function make_cam(target)
    -- adapted from mhughson template
    -- https://www.lexaloffle.com/bbs/cposts/3/37402.p8.png
    local c=
    {
        tar=target,--target to follow.
        pos=m_vec(target.x,target.y),
       
        --how far from center of screen target must
        --be before camera starts following.
        --allows for movement in center without camera
        --constantly moving.
        pull_threshold=16,

        --min and max positions of camera.
        --the edges of the level.
        pos_min=m_vec(64,64),
        pos_max=m_vec(960,256),

        update=function(self)
           
            --follow target outside of
            --pull range.
            if self:pull_max_x()<self.tar.x then
                self.pos.x+=min(self.tar.x-self:pull_max_x(),4)
            end
            if self:pull_min_x()>self.tar.x then
                self.pos.x+=min((self.tar.x-self:pull_min_x()),4)
            end
            if self:pull_max_y()<self.tar.y then
                self.pos.y+=min(self.tar.y-self:pull_max_y(),4)
            end
            if self:pull_min_y()>self.tar.y then
                self.pos.y+=min((self.tar.y-self:pull_min_y()),4)
            end

            --lock to edge
            if(self.pos.x<self.pos_min.x)self.pos.x=self.pos_min.x
            if(self.pos.x>self.pos_max.x)self.pos.x=self.pos_max.x
            if(self.pos.y<self.pos_min.y)self.pos.y=self.pos_min.y
            if(self.pos.y>self.pos_max.y)self.pos.y=self.pos_max.y
        end,

        cam_pos=function(self)
            return self.pos.x-64,self.pos.y-64
        end,

        pull_max_x=function(self)
            return self.pos.x+self.pull_threshold
        end,

        pull_min_x=function(self)
            return self.pos.x-self.pull_threshold
        end,

        pull_max_y=function(self)
            return self.pos.y+self.pull_threshold
        end,

        pull_min_y=function(self)
            return self.pos.y-self.pull_threshold
        end
    }

    return c
end

-- function that checks wall collision
function check_collision(x, y, w, h, flag)
    local up = {x + (w / 2), y}
    local down = {x + (w / 2), y + h} 
    local left = {x, y + (h / 2)}
    local right = {x + h, y + (h / 2)}
    local up_map_tile = mget(flr(up[1]/8) + map_x, flr(up[2]/8) + map_y)
    local down_map_tile = mget(flr(down[1]/8) + map_x, flr(down[2]/8) + map_y)
    local left_map_tile = mget(flr(left[1]/8) + map_x, flr(left[2]/8) + map_y)
    local right_map_tile = mget(flr(right[1]/8) + map_x, flr(right[2]/8) + map_y)
    if fget(up_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(up[1]/8), flr(up[2]/8))
        y = ty + h
    end
    if fget(down_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(down[1]/8), flr(down[2]/8))
        y = ty - h
    end
    if fget(left_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(left[1]/8), flr(left[2]/8))
        x = tx + w
    end
    if fget(right_map_tile, flag) then
        local tx, ty = map_tile_to_coords(flr(right[1]/8), flr(right[2]/8))
        x = tx - w
    end
    return x, y, fget(down_map_tile, flag), fget(up_map_tile, flag)
end

function map_tile_to_coords(gx, gy)
    return (gx * 8), (gy * 8)
end

-- function that checks if two lines overlap
function overlapping_lines(min1, max1, min2, max2)
    return max1 > min2 and max2 > min1
end
    
-- function that checks if two rectangles overlap
function overlapping_rectangles(x1, y1, w1, h1, x2, y2, w2, h2)
    return overlapping_lines(x1, x1 + w1, x2, x2 + w2) and overlapping_lines(y1, y1 + h1, y2, y2 + h2)
end

__gfx__
00000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000050000000000005000000000000555000000000000000000000000000000005000055500000000000500000555000000000000000000000000000000000
00655055500005500005550000006550555500055000000005000055500000000005550066550000000000555006555000000000000655000000000000000000
06655055550006550005555000066550566000655500000005550065550000055555555006665055555555555506550000000500006555000000000000000000
06550056600006650005660000065505560000665500055555555066650555555556660000066555555555666006550555500555006500000050000000000000
06500556000006650055600000065005566000066505555556660000665555566666000000000056666666600000655555555555506500000055500000000000
06505566600000650556660000065055600000006655556666000000000556660000600000000666000000060000000666555666000505555555550000000000
00505560000000050556000000005055600000000005666006000000006660000000000000000000000000000000000060066600000055555566600000000000
00055560000000005556000000000555600000000006600000000000006000000000000000000000000000000000000060000600000005666660000000000000
00005566000000000556600000000055660000000066000000000000000000000000000000000000000000000000000000000000000006600600000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03030303444444444444444435433345489444980000000848000000000000000000000000000000565666565666656666666666666666666666666600000000
33333333444445444664454444333334994444490000444999440000000000000000000000000000565566565666656666666666666666666666666600000000
33333333444444444444444434333354494444890004448949444400094444000000000000000000566566555665666566666666666666666666666600000000
34443434445444544454445433533553448448840084488444844880448448840000000444000000654565466665666566666666666666666666666600000000
54444544444444444444444433553353448844840488448444884480448844840000448444880000664665466665666566666666666660000000000000000000
44544444444444444444644434355444494889994948899949488999494889990008899949488000644465446665666666660000000000000000000000000000
44444444454445444544444434333433494449444944494449444944494449440044494449444940544666646666666660000000000000000000000000000000
45444454444444444444444435335533484488444844884448448844484488444844884448448844644454665666656600000000000000000000000000000000
00600000000303030303000000044444444440004444444444444444000004444440000000000000000000000000000000000000000000000000000000000000
06544440003333333333330000444544444445004444454444444544000000444400000000000000000000000000000000000000000000000000000000000000
05644444033333333333333004444444444444404444444444444444000000044000000000000000000000000000000000000000000000000000000000000000
56544444334434343444343344544454445444544454445444544454000000000000000000000000000000000000000000000000000000000000000000000000
05644440344445445444454344444444444444444444444444444444000000000000000000000000000000000000000000000000000000000000000000000000
00500000345444444454444344444444444444444444444004444444000000000000000000000000000000000000000000000000000000000000000000000000
00000000344444444444444345444544454445444544450000444544000000000000000000000000000000000000000000000000000000000000000000000000
00000000454444544544445444444444444444444444400000044444000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020200000000000000020202020200040202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4b4744474d47440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b444d464644470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b4747004700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000514052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000564155000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b4900000000484900000000000000000000000000000000000000000000000000000000000000000000000000000000000048490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b
4b4c4d4e4e4e4e4e00000000005140405200000000000000005140404040404040520000000051404040404040404040404040404040404040404052000000005140524900000000000000000000000000514040404040404040404040520000000000000000000000000000000000000000000000000000000000000000484b
4b0000000000000000000000005641415500000000000000005641414141414141550000000056414141414141414141414141414141414141414155000000004141414040404052000000000000000000564141414141414141414141550000000000515200000000000000000000000000005140404040404040404040404a
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056414141414141550000000000000000000000000000000000000000000000000000005655000000000000000000000000000041414141414141414141414141
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414141414141414141414141
4b00000000000000000000000000000000000051404040404052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051404040520000000041414141414141414141414141
4b00000000000000000000000000000000000056414141414155000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056414141550000000041414141414141414141414141
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414141414141414141414141
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056414141414141414141414141
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544444449484749000000005741
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454444444444444444490000000041
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051404040404040404040404040404040404040404040404040404040404040400000000041
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414141414141414141414141414141414141414141414141414141414141414900000041
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051405200000000000041414141414141414141414141414141414141414141414141414141414141414052000041
4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414100000000000041414141414141414141414141414141414141414141414141414141414141414141000041
4b00000000454647490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414100000000000041414141414141414141414141414141414141414141414141414141414141414155000041
4b00000051404040405200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041414100000000000041414141414141414141414141415800000000000000000000000000000000000000000041
4b00000041414141414149000000000000000000484900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004841414149000000004541414141414141414141414141410000000000000000000000000000000000000000004841
4a40404041414141414140404040404040404040404040404040404040404040404040405248474446000051404040404040404040404040404040404052000000000000514040404040404040404040404041414140404040404041414141414141414141414141410000000000000000534141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414144444444460056414141414141414141414141414141414141474900004847414141414141414141414141414141414141414141414141414141414141414141414141410000000000000000414141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414144444444444600000000000057414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414749000000000048414141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414144444444444446490000000048414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141
4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141
